// Code generated by protoc-gen-go.
// source: router.proto
// DO NOT EDIT!

/*
Package platform_grpc is a generated protocol buffer package.

It is generated from these files:
	router.proto

It has these top-level messages:
	Request
*/
package platform_grpc

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Request struct {
	Method   int32  `protobuf:"varint,1,opt,name=method" json:"method,omitempty"`
	Resource int32  `protobuf:"varint,2,opt,name=resource" json:"resource,omitempty"`
	Body     []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

func init() {
}

// Client API for Router service

type RouterClient interface {
	Route(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Request, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) Route(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := grpc.Invoke(ctx, "/platform_grpc.Router/Route", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Router service

type RouterServer interface {
	Route(context.Context, *Request) (*Request, error)
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_Route_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Request)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RouterServer).Route(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "platform_grpc.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Route",
			Handler:    _Router_Route_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
