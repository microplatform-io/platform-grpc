// Code generated by protoc-gen-go.
// source: router.proto
// DO NOT EDIT!

/*
Package platform_grpc is a generated protocol buffer package.

It is generated from these files:
	router.proto

It has these top-level messages:
	Request
*/
package platform_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Request struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Router service

type RouterClient interface {
	Route(ctx context.Context, opts ...grpc.CallOption) (Router_RouteClient, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) Route(ctx context.Context, opts ...grpc.CallOption) (Router_RouteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Router_serviceDesc.Streams[0], c.cc, "/platform_grpc.Router/Route", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerRouteClient{stream}
	return x, nil
}

type Router_RouteClient interface {
	Send(*Request) error
	Recv() (*Request, error)
	grpc.ClientStream
}

type routerRouteClient struct {
	grpc.ClientStream
}

func (x *routerRouteClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerRouteClient) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Router service

type RouterServer interface {
	Route(Router_RouteServer) error
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_Route_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).Route(&routerRouteServer{stream})
}

type Router_RouteServer interface {
	Send(*Request) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type routerRouteServer struct {
	grpc.ServerStream
}

func (x *routerRouteServer) Send(m *Request) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerRouteServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "platform_grpc.Router",
	HandlerType: (*RouterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Route",
			Handler:       _Router_Route_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
